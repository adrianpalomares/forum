{"version":3,"sources":["./src/app/pages/home/home.component.ts","./src/app/pages/home/home.component.html","./src/app/posts/posts.module.ts","./src/environments/environment.ts","./src/app/pages/login/login.component.ts","./src/app/pages/login/login.component.html","./src/app/auth/token-interceptor.service.ts","./src/app/pages/logout/logout.component.ts","./src/app/pages/logout/logout.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/posts/posts.service.ts","./src/app/comments/comments.service.ts","./src/app/app.module.ts","./src/app/posts/postCard.component.ts","./src/app/posts/postCard.component.html","./src/app/pages/pages.module.ts","./src/app/pages/register/register.component.ts","./src/app/pages/register/register.component.html","./src/app/pages/post/post.component.ts","./src/app/pages/post/post.component.html","./src/app/auth/auth.service.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Post } from '../../posts/post.model';\nimport { PostService } from '../../posts/posts.service';\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent implements OnInit {\n  posts: Post[];\n  constructor(private postService: PostService) {}\n\n  ngOnInit(): void {\n    // if (localStorage.getItem('token') != null) { // temp change because of tests\n      this.postService.getPosts().subscribe((res) => (this.posts = res));\n    // }\n    console.log(this.posts);\n  }\n}\n","<div class=\"container\">\n  <div class=\"row mt-4\">\n    <div class=\"col-md-12\">\n      <!-- Posts -->\n      <div *ngIf=\"posts\">\n        <app-postcard *ngFor=\"let post of posts;\" [post]=\"post\"></app-postcard>\n      </div>\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PostCardComponent } from './postCard.component';\n@NgModule({\n    declarations: [PostCardComponent],\n    imports: [CommonModule],\n    exports: [PostCardComponent],\n})\nexport class PostsModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/auth/auth.service';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n    form: FormGroup;\n\n    constructor(\n        private fb: FormBuilder,\n        private authService: AuthService,\n        private router: Router\n    ) {}\n\n    ngOnInit(): void {\n        this.form = this.fb.group({\n            email: [\n                '',\n                [\n                    Validators.required,\n                    Validators.pattern(\n                        '^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$'\n                    ),\n                ],\n            ],\n            password: ['', Validators.required],\n        });\n    }\n\n    onSubmit(): void {\n        const email = this.form.get('email').value;\n        const password = this.form.get('password').value;\n        // Log in with authService\n        // If success set token to localstorage\n        this.authService.login(email, password).subscribe(\n            (response) => {\n                console.log(response);\n                localStorage.setItem('token', JSON.stringify(response.token));\n                localStorage.setItem(\n                    'username',\n                    JSON.stringify(response.username)\n                );\n                localStorage.setItem('userId', JSON.stringify(response.userId));\n                this.router.navigate(['/']);\n            },\n            // If error\n            (response) => {\n                console.log('Login error', response);\n            }\n        );\n    }\n}\n","<div class=\"container mt-4\">\n  <form (ngSubmit)=\"onSubmit\" [formGroup]=\"form\" class=\"col-sm-4 mx-auto\">\n    <h1 class=\"mb-4\">Login</h1>\n    <!-- Email input -->\n    <div class=\"form-outline mb-4\">\n      <input formControlName=\"email\" type=\"email\" id=\"form1Example1\" class=\"form-control\" />\n      <label class=\"form-label\" for=\"form1Example1\">Email address</label>\n    </div>\n\n    <!-- Password input -->\n    <div class=\"form-outline mb-4\">\n      <input formControlName=\"password\" type=\"password\" id=\"form1Example2\" class=\"form-control\" />\n      <label class=\"form-label\" for=\"form1Example2\">Password</label>\n    </div>\n\n    <!-- 2 column grid layout for inline styling -->\n    <div class=\"row mb-4\">\n      <div class=\"col d-flex justify-content-center\">\n        <!-- Checkbox -->\n        <div class=\"form-check\">\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            value=\"\"\n            id=\"form1Example3\"\n            checked\n          />\n          <label class=\"form-check-label\" for=\"form1Example3\">\n            Remember me\n          </label>\n        </div>\n      </div>\n\n      <div class=\"col\">\n        <!-- Simple link -->\n        <a href=\"#!\">Forgot password?</a>\n      </div>\n    </div>\n\n    <!-- Submit button -->\n    <div>\n      <button\n        id=\"signin-button\"\n        (click)=\"onSubmit()\"\n        type=\"submit\"\n        class=\"btn btn-primary btn-block\"\n      >\n        Sign in\n      </button>\n      <button\n        id=\"register-button\"\n        type=\"submit\"\n        class=\"btn btn-primary btn-block\"\n      >\n        Register\n      </button>\n    </div>\n  </form>\n</div>\n","/**\n * Responsible for adding the token to the request\n * */\n\nimport {\n    HttpEvent,\n    HttpHandler,\n    HttpInterceptor,\n    HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TokenInterceptorService implements HttpInterceptor {\n    constructor(private authService: AuthService) {}\n    intercept(\n        req: HttpRequest<any>,\n        next: HttpHandler\n    ): Observable<HttpEvent<any>> {\n        // the object that goes into clone()\n        // if the user is logged in then send the token in header\n        // there was issues with sending Bearer string with no token\n        const update = this.authService.isLoggedIn()\n            ? {\n                  setHeaders: {\n                      Authorization: `Bearer ${JSON.parse(\n                          this.authService.getToken()\n                      )}`,\n                  },\n              }\n            : {};\n        const request = req.clone(update);\n        console.log(request);\n        return next.handle(request);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/auth/auth.service';\n\n@Component({\n    selector: 'app-logout',\n    templateUrl: './logout.component.html',\n    styleUrls: ['./logout.component.css'],\n})\nexport class LogoutComponent implements OnInit {\n    constructor(private authService: AuthService, private router: Router) {}\n\n    ngOnInit(): void {\n        this.authService.logout();\n        this.router.navigate(['']);\n    }\n}\n","<p>logout works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from './auth/auth.service';\nimport { PostService } from './posts/posts.service';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css'],\n    providers: [PostService],\n})\nexport class AppComponent implements OnInit {\n    title = 'angular-app';\n    loggedIn: boolean;\n\n    constructor(private authService: AuthService, private router: Router) {}\n    ngOnInit(): void {\n        //   this.loggedIn = this.authService.isLoggedIn();\n        //   console.log(this.loggedIn)\n        this.router.events.subscribe((event) => {\n            if (event.constructor.name == 'NavigationEnd') {\n                this.loggedIn = this.authService.isLoggedIn();\n            }\n        });\n    }\n}\n","<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n  <div class=\"container\">\n    <a class=\"navbar-brand\" href=\"#\">Forum</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n      <ul class=\"navbar-nav ml-auto\">\n        <li class=\"nav-item\">\n          <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n        </li>\n        <!-- If not logged in -->\n        <li *ngIf=\"!loggedIn\" class=\"nav-item\">\n          <a class=\"nav-link\" href=\"login\">Login</a>\n        </li>\n        <li *ngIf=\"!loggedIn\" class=\"nav-item\">\n          <a class=\"nav-link\" href=\"register\">Register</a>\n        </li>\n        <!-- If logged in -->\n        <li *ngIf=\"loggedIn\" class=\"nav-item\">\n          <a class=\"nav-link\" href=\"logoutroute\">Logout</a>\n        </li>\n        \n      </ul>\n    </div>\n  </div>\n</nav>\n<router-outlet></router-outlet>","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Post } from './post.model';\n@Injectable()\nexport class PostService {\n    // Url\n    apiUrl: string = '/api/posts';\n    constructor(private httpClient: HttpClient) {}\n\n    public getPosts() {\n        return this.httpClient.get<Post[]>(`${this.apiUrl}/`);\n    }\n\n    public getPostById(id: string) {\n        return this.httpClient.get<Post>(`${this.apiUrl}/${id}`);\n    }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Post } from '../posts/post.model';\nimport { Comment } from '../comments/comment.model';\n\n@Injectable()\nexport class CommentService {\n    apiUrl: string = 'api/comments';\n\n    constructor(private httpClient: HttpClient) {}\n\n    public getCommentsByPost(post: Post) {\n        return this.httpClient.get<Comment[]>(\n            `${this.apiUrl}?postId=${post.id}`\n        );\n    }\n\n    public createComment(comment: Comment) {\n        return this.httpClient.post<Comment>(`${this.apiUrl}`, comment);\n    }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { PagesModule } from './pages/pages.module';\nimport { PostsModule } from './posts/posts.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { TokenInterceptorService } from './auth/token-interceptor.service';\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        HttpClientModule,\n        PagesModule,\n        PostsModule,\n    ],\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: TokenInterceptorService,\n            multi: true,\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { CommentService } from '../comments/comments.service';\nimport { Post } from './post.model';\nimport { Comment } from '../comments/comment.model';\n\n@Component({\n    selector: 'app-postcard',\n    templateUrl: './postCard.component.html',\n})\nexport class PostCardComponent implements OnInit {\n    @Input() post: Post;\n    comments: Comment[];\n    constructor(private commentService: CommentService) {}\n    ngOnInit(): void {\n        this.commentService\n            .getCommentsByPost(this.post)\n            .subscribe((res) => (this.comments = res));\n    }\n}\n","<div class=\"card mb-4\">\n  <div class=\"card-body\">\n    <h3 class=\"card-title\">\n      <a class=\"card-link\" href=\"/post/{{ post.id }}\">{{ post.title }}</a>\n    </h3>\n    <h6 class=\"card-subtitle mb-2 text-muted\">This post's user is</h6>\n    <p class=\"card-text\">This posts id is {{ post.id }}</p>\n    <span class=\"oi oi-thumb-up mr-2\"> 999</span>\n    <span class=\"oi oi-thumb-down mr-2\"> 999</span>\n    <span *ngIf=\"comments\" class=\"oi oi-comment-square mr-2\">\n      {{ comments.length }}</span\n    >\n    <span *ngIf=\"!comments\" class=\"oi oi-comment-square mr-2\"> ?</span>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { PostsModule } from '../posts/posts.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AuthService } from '../auth/auth.service';\nimport { CommentService } from '../comments/comments.service';\nimport { LogoutComponent } from './logout/logout.component';\nimport { PostComponent } from './post/post.component';\n\n@NgModule({\n    declarations: [\n        HomeComponent,\n        LoginComponent,\n        RegisterComponent,\n        LogoutComponent,\n        PostComponent,\n    ],\n    imports: [CommonModule, PostsModule, ReactiveFormsModule, FormsModule],\n    providers: [AuthService, CommentService],\n})\nexport class PagesModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/auth/auth.service';\n\n@Component({\n    selector: 'app-register',\n    templateUrl: './register.component.html',\n    styleUrls: ['./register.component.css'],\n})\nexport class RegisterComponent implements OnInit {\n    form: FormGroup;\n\n    constructor(\n        private fb: FormBuilder,\n        private authService: AuthService,\n        private router: Router\n    ) {}\n\n    ngOnInit(): void {\n        this.form = this.fb.group({\n            email: ['', Validators.required],\n            username: ['', Validators.required],\n            password: ['', Validators.required],\n            confirmPassword: ['', Validators.required],\n        });\n    }\n\n    onSubmit(): void {\n        // TODO: Can probably incorporate more of Validator logic\n        if (this.form.invalid) {\n            console.log('from invalid', this.form);\n            return;\n        }\n\n        // Check if passwords match\n        if (\n            this.form.get('password').value ==\n            this.form.get('confirmPassword').value\n        ) {\n            // Send request\n            //TODO: At the moment, it accepts adding the same user (existing email/user)\n            this.authService\n                .register(\n                    this.form.get('username').value,\n                    this.form.get('password').value,\n                    this.form.get('email').value\n                )\n                .subscribe(\n                    (response) => {\n                        console.log(response);\n                        this.router.navigate(['login']);\n                    },\n                    // Handle error\n                    (response) => {\n                        console.log('error');\n                    }\n                );\n            console.log('success');\n        } else {\n            alert('mismatching passwords');\n        }\n\n        // If successful redirect to login page\n\n        // else highlight area that is wrong eg. Mismatching passwords\n    }\n}\n","<div class=\"container mt-4\">\n  <h1>Register</h1>\n  <form [formGroup]=\"form\" class=\"col-sm-4 mx-auto\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-group\">\n      <label for=\"inputEmail\">Email address</label>\n      <input\n        type=\"email\"\n        class=\"form-control\"\n        id=\"inputEmail\"\n        placeholder=\"Enter email\"\n        formControlName=\"email\"\n      />\n    </div>\n    <div class=\"form-group\">\n      <label for=\"inputUsername\">Username</label>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        id=\"inputUsername\"\n        placeholder=\"Enter username\"\n        formControlName=\"username\"\n      />\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"inputPassword\">Password</label>\n      <input\n        type=\"password\"\n        class=\"form-control\"\n        id=\"inputPassword\"\n        placeholder=\"Password\"\n        formControlName=\"password\"\n      />\n    </div>\n    <div class=\"form-group\">\n      <label for=\"inputConfirmPassword\">Confirm Password</label>\n      <input\n        type=\"password\"\n        class=\"form-control\"\n        id=\"inputConfirmPassword\"\n        placeholder=\"Confirm Password\"\n        formControlName=\"confirmPassword\"\n      />\n    </div>\n    <div class=\"col text-center mt-4\">\n      <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onSubmit\">Submit</button>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CommentService } from 'src/app/comments/comments.service';\nimport { Post } from 'src/app/posts/post.model';\nimport { Comment } from 'src/app/comments/comment.model';\nimport { PostService } from 'src/app/posts/posts.service';\nimport { AuthService } from 'src/app/auth/auth.service';\n\n@Component({\n    selector: 'app-post',\n    templateUrl: './post.component.html',\n    styleUrls: ['./post.component.css'],\n})\nexport class PostComponent implements OnInit {\n    post: Post;\n    comments: Comment[];\n    commentArea: string = '';\n\n    constructor(\n        private route: ActivatedRoute,\n        private postService: PostService,\n        private commentService: CommentService,\n        private authService: AuthService\n    ) {}\n\n    ngOnInit(): void {\n        console.log(this.route.snapshot.params);\n        // Grab the post\n        this.postService\n            .getPostById(this.route.snapshot.params.id)\n            .subscribe((res) => {\n                console.log(res);\n                this.post = res;\n                // Then grab the comments\n                this.commentService.getCommentsByPost(this.post).subscribe(\n                    (comments) => {\n                        this.comments = comments;\n                        console.log(this.comments.length);\n                    },\n                    (err) => console.log(err)\n                );\n            });\n    }\n\n    onCommentSubmit(e): void {\n        if (e.ctrlKey && e.keyCode === 13) {\n            console.log('match');\n            // Send comment request to api\n            const comment: Comment = {\n                // TODO: Need to make this a comment type\n                // TODO: userid is hardcoded\n                userId: JSON.parse(this.authService.getUserId()), // Can probably get this from the jwt\n                postId: this.post.id,\n                content: this.commentArea,\n            };\n            this.commentService.createComment(comment).subscribe(\n                (res) => {\n                    this.comments.push(res);\n                    this.commentArea = '';\n                },\n                (err) => {\n                    console.log('erorr', err);\n                }\n            );\n        }\n    }\n}\n","<div class=\"container mt-4\">\n  <div class=\"border\">\n    <h1 *ngIf=\"post\" class=\"text-uppercase font-weight-bold text-center mb-4\">\n      {{ post.title }}\n    </h1>\n    <!-- Content will go here -->\n    <p *ngIf=\"post\" class=\"text-center\">\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Ipsa neque\n      praesentium architecto obcaecati, quibusdam earum laudantium repellat.\n      Saepe illo dolores tempore aperiam! Accusantium ipsam nihil ducimus earum\n      animi eligendi porro!\n    </p>\n  </div>\n\n  <div class=\"form-group\">\n    <!-- <label for=\"exampleFormControlTextarea1\">Example textarea</label> -->\n    <textarea\n      [(ngModel)]=\"commentArea\"\n      (keydown)=\"onCommentSubmit($event)\"\n      class=\"form-control mt-3\"\n      id=\"commentArea\"\n      placeholder=\"Enter comment\"\n      rows=\"2\"\n    ></textarea>\n  </div>\n\n  <div class=\"mb-3\">\n    <h5>Comments</h5>\n  </div>\n\n  <div *ngIf=\"comments\">\n    <div *ngIf=\"comments.length === 0\">No comments yet!</div>\n    <div *ngFor=\"let comment of comments\" class=\"card\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">{{ comment.user.username }}</h5>\n        <!-- TODO: Add date later -->\n        <!-- <h6 class=\"card-subtitle mb-2 text-muted\">01/12/12</h6> -->\n        <p class=\"card-text\">\n          {{ comment.content }}\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class AuthService {\n    apiUrl: string = 'api/auth';\n\n    constructor(private httpClient: HttpClient) {}\n\n    login(username: String, password: String) {\n        return this.httpClient.post<any>(`${this.apiUrl}/login`, {\n            username: username,\n            password: password,\n        });\n    }\n\n    isLoggedIn() {\n        const token = localStorage.getItem('token');\n        return token != null;\n    }\n\n    logout() {\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        localStorage.removeItem('userId');\n    }\n\n    register(username: String, password: String, email: String) {\n        return this.httpClient.post<any>(\n            `${this.apiUrl}/register`,\n            {\n                username: username,\n                password: password,\n                email: email,\n            },\n            { observe: 'response' }\n        );\n    }\n\n    getToken() {\n        const token = localStorage.getItem('token');\n        return token;\n    }\n\n    getUsername() {\n        const username = localStorage.getItem('username');\n        return username;\n    }\n\n    getUserId() {\n        const userId = localStorage.getItem('userId');\n        return userId;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './pages/home/home.component';\nimport { LoginComponent } from './pages/login/login.component';\nimport { LogoutComponent } from './pages/logout/logout.component';\nimport { PostComponent } from './pages/post/post.component';\nimport { RegisterComponent } from './pages/register/register.component';\n\nconst routes: Routes = [\n    { path: '', component: HomeComponent },\n    { path: 'login', component: LoginComponent },\n    { path: 'register', component: RegisterComponent },\n    { path: 'logoutroute', component: LogoutComponent },\n    { path: 'post/:id', component: PostComponent },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}